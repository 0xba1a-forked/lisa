$result = ""
$testResult = ""
$resultArr = @()
$isDeployed = DeployVMS -setupType $currentTestData.setupType -Distro $Distro -xmlConfig $xmlConfig
if ($isDeployed)
{
	try
	{
		$hs1VIP = $AllVMData.PublicIP
		$hs1vm1sshport = $AllVMData.SSHPort
		$hs1ServiceUrl = $AllVMData.URL
		$hs1vm1Dip = $AllVMData.InternalIP

		LogMsg "Generating constansts.sh ..."
		$constantsFile = "$LogDir\constants.sh"
		Set-Content -Value "#Generated by Azure Automation." -Path $constantsFile

		foreach ( $param in $currentTestData.TestParameters.param)
		{
			Add-Content -Value "$param" -Path $constantsFile
		}
		LogMsg "constanst.sh created successfully..."
		LogMsg (Get-Content -Path $constantsFile)

		RemoteCopy -uploadTo $hs1VIP -port $hs1vm1sshport -files $currentTestData.files -username $user -password $password -upload
		RemoteCopy -uploadTo $hs1VIP -port $hs1vm1sshport -files ".\$constantsFile" -username $user -password $password -upload
		RunLinuxCmd -username $user -password $password -ip $hs1VIP -port $hs1vm1sshport -command "chmod +x *" -runAsSudo

		LogMsg "Executing : $($currentTestData.testScript)"
		$testJob = RunLinuxCmd -username $user -password $password -ip $hs1VIP -port $hs1vm1sshport -command "/home/$user/$($currentTestData.testScript) -logFolder /home/$user > /home/$user/TestExecutionConsole.log" -runAsSudo -RunInBackground

        while ( (Get-Job -Id $testJob).State -eq "Running" )
        {
            $currentStatus = RunLinuxCmd -username $user -password $password -ip $hs1VIP -port $hs1vm1sshport -command "cat /home/$user/state.txt"
            LogMsg "Current Test Staus : $currentStatus"
            WaitFor -seconds 20
        }

		RemoteCopy -download -downloadFrom $hs1VIP -files "/home/$user/state.txt, /home/$user/$($currentTestData.testScript).log, /home/$user/TestExecutionConsole.log" -downloadTo $LogDir -port $hs1vm1sshport -username $user -password $password
		$finalStatus = Get-Content $LogDir\state.txt
		if ($finalStatus -imatch "TestFailed")
		{
			LogErr "Test failed. Last known status : $currentStatus."
			$testResult = "FAIL"
		}
		elseif ($finalStatus -imatch "TestAborted")
		{
			LogErr "Test Aborted. Last known status : $currentStatus."
			$testResult = "ABORTED"
		}
		elseif ($finalStatus -imatch "TestCompleted")
		{
			$testResult = "PASS"
		}
		elseif ($finalStatus -imatch "TestRunning")
		{
			LogMsg "Powershell backgroud job for test is completed but VM is reporting that test is still running. Please check $LogDir\zkConsoleLogs.txt"
			LogMsg "Contests of summary.log : $testSummary"
			$testResult = "ABORTED"
		}

		RunLinuxCmd -username $user -password $password -ip $hs1VIP -port $hs1vm1sshport -command ". azuremodules.sh && collect_VM_properties" -runAsSudo
		RemoteCopy -download -downloadFrom $hs1VIP -files "/home/$user/VM_properties.csv" -downloadTo $LogDir -port $hs1vm1sshport -username $user -password $password

		if ($testResult -imatch "PASS")
		{
			RemoteCopy -download -downloadFrom $hs1VIP -files "/home/$user/ntttcpConsoleLogs, /home/$user/ntttcpTest.log" -downloadTo $LogDir -port $hs1vm1sshport -username $user -password $password
			RemoteCopy -download -downloadFrom $hs1VIP -files "/home/$user/nested_properties.csv, /home/$user/report.log" -downloadTo $LogDir -port $hs1vm1sshport -username $user -password $password
			RemoteCopy -download -downloadFrom $hs1VIP -files "/home/$user/ntttcp-test-logs-receiver.tar, /home/$user/ntttcp-test-logs-sender.tar" -downloadTo $LogDir -port $hs1vm1sshport -username $user -password $password

			$testSummary = $null
			$ntttcpReportLog = Get-Content -Path "$LogDir\report.log"
			if (!$ntttcpReportLog)
			{
				$testResult = "FAIL"
				throw "Invalid NTTTCP report file"
			}
			$uploadResults = $true
			foreach ( $line in $ntttcpReportLog )
			{
				if ( $line -imatch "test_connections" )
				{
					continue;
				}
				try
				{
					$test_connections = $line.Trim().Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Split(" ")[0]
					$throughput_gbps = $line.Trim().Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Split(" ")[1]
					$cycle_per_byte = $line.Trim().Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Split(" ")[2]
					$average_tcp_latency = $line.Trim().Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Replace("  "," ").Split(" ")[3]
					$metadata = "Connections=$test_connections"
					$connResult = "throughput=$throughput_gbps`Gbps cyclePerBytet=$cycle_per_byte Avg_TCP_lat=$average_tcp_latency"
					$resultSummary +=  CreateResultSummary -testResult $connResult -metaData $metaData -checkValues "PASS,FAIL,ABORTED" -testName $currentTestData.testName
					if ([string]$throughput_gbps -imatch "0.00")
					{
						$testResult = "FAIL"
						$uploadResults = $false
					}
				}
				catch
				{
					$resultSummary +=  CreateResultSummary -testResult "Error in parsing logs." -metaData "NTTTCP" -checkValues "PASS,FAIL,ABORTED" -testName $currentTestData.testName
				}
			}
			#endregion

			LogMsg $resultSummary
			if (!$uploadResults)
			{
				throw "Zero throughput for some connections, results will not be uploaded to database!"
			}

			LogMsg "Uploading the test results.."
			$dataSource = $xmlConfig.config.Azure.database.server
			$user = $xmlConfig.config.Azure.database.user
			$password = $xmlConfig.config.Azure.database.password
			$database = $xmlConfig.config.Azure.database.dbname
			$dataTableName = $xmlConfig.config.Azure.database.dbtable
			$TestCaseName = $xmlConfig.config.Azure.database.testTag
			if ($dataSource -And $user -And $password -And $database -And $dataTableName)
			{
				# Get host info
				$HostType	= "Azure"
				$HostBy	= ($xmlConfig.config.Azure.General.Location).Replace('"','')
				$HostOS	= cat "$LogDir\VM_properties.csv" | Select-String "Host Version"| %{$_ -replace ",Host Version,",""}

				# Get L1 guest info
				$L1GuestDistro	= cat "$LogDir\VM_properties.csv" | Select-String "OS type"| %{$_ -replace ",OS type,",""}
				$L1GuestOSType	= "Linux"
				$L1GuestSize = $AllVMData.InstanceSize
				$L1GuestKernelVersion	= cat "$LogDir\VM_properties.csv" | Select-String "Kernel version"| %{$_ -replace ",Kernel version,",""}

				# Get L2 guest info
				$L2GuestDistro	= cat "$LogDir\nested_properties.csv" | Select-String "OS type"| %{$_ -replace ",OS type,",""}
				$L2GuestKernelVersion	= cat "$LogDir\nested_properties.csv" | Select-String "Kernel version"| %{$_ -replace ",Kernel version,",""}

				foreach ( $param in $currentTestData.TestParameters.param)
				{
					if ($param -match "NestedCpuNum")
					{
						$L2GuestCpuNum = [int]($param.split("=")[1])
					}
					if ($param -match "NestedMemMB")
					{
						$L2GuestMemMB = [int]($param.split("=")[1])
					}
					if ($param -match "NestedNetDevice")
					{
						$KvmNetDevice = $param.split("=")[1]
					}
				}

				$IPVersion = "IPv4"
				$ProtocolType = "TCP"
				$connectionString = "Server=$dataSource;uid=$user; pwd=$password;Database=$database;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
				$LogContents = Get-Content -Path "$LogDir\report.log"
				$SQLQuery = "INSERT INTO $dataTableName (TestCaseName,TestDate,HostType,HostBy,HostOS,L1GuestOSType,L1GuestDistro,L1GuestSize,L1GuestKernelVersion,L2GuestDistro,L2GuestKernelVersion,L2GuestMemMB,L2GuestCpuNum,KvmNetDevice,IPVersion,ProtocolType,NumberOfConnections,Throughput_Gbps,Latency_ms) VALUES "

				for($i = 1; $i -lt $LogContents.Count; $i++)
				{
					$Line = $LogContents[$i].Trim() -split '\s+'
					$SQLQuery += "('$TestCaseName','$(Get-Date -Format yyyy-MM-dd)','$HostType','$HostBy','$HostOS','$L1GuestOSType','$L1GuestDistro','$L1GuestSize','$L1GuestKernelVersion','$L2GuestDistro','$L2GuestKernelVersion','$L2GuestMemMB','$L2GuestCpuNum','$KvmNetDevice','$IPVersion','$ProtocolType',$($Line[0]),$($Line[1]),$($Line[2])),"
				}
				$SQLQuery = $SQLQuery.TrimEnd(',')
				LogMsg $SQLQuery

				$connection = New-Object System.Data.SqlClient.SqlConnection
				$connection.ConnectionString = $connectionString
				$connection.Open()

				$command = $connection.CreateCommand()
				$command.CommandText = $SQLQuery
				$result = $command.executenonquery()
				$connection.Close()
				LogMsg "Uploading the test results done!!"
			}
			else
			{
				LogMsg "Database details are not provided. Results will not be uploaded to database!"
			}
		}
	}
	catch
	{
		$ErrorMessage =  $_.Exception.Message
		LogMsg "EXCEPTION : $ErrorMessage"   
	}
	Finally
	{
		$metaData = ""
		if (!$testResult)
		{
			$testResult = "Aborted"
		}
		$resultArr += $testResult
		LogMsg "Test result : $testResult"
	}   
}
else
{
	$testResult = "Aborted"
	$resultArr += $testResult
}

$result = GetFinalResultHeader -resultarr $resultArr

#Clean up the setup
DoTestCleanUp -result $result -testName $currentTestData.testName -deployedServices $isDeployed -ResourceGroups $isDeployed

#Return the result and summery to the test suite script..
return $result
